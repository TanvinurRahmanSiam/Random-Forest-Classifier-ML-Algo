# -*- coding: utf-8 -*-
"""ML_ Randomforest Algo_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M3Q9Lzn6dIYrxhH-5sItnI-ak6xD33W6

**Random Forest is a well-known machine learning algorithm that uses the supervised learning method. In machine learning, it can be used for both classification and regression problems. It is based on ensemble learning, which is a method of combining multiple classifiers to solve a complex problem and improve the model's performance.**

**"Random Forest is a classifier that contains a number of decision trees on various subsets of a given dataset and takes the average to improve the predictive accuracy of that dataset," according to the name. Instead of relying on a single decision tree, the random forest takes the predictions from each tree and predicts the final output based on the majority votes of predictions.**

`"load_digits"; Recognizing hand-written digits. Feature agglomeration. Various Agglomerative Clustering on a 2D embedding of digits.`
"""

import pandas as pd
from sklearn.datasets import load_digits
digits = load_digits()

dir(digits)  # directory of the dataset.

"""`The "gray()" function in pyplot module of matplotlib library is used to set the colormap to “gray”`

`In a new figure window, the "matshow()" function is used to represent an array as a matrix. The origin is set to the upper left-hand corner, and the rows (first dimension of the array) are displayed horizontally. To avoid short and narrow figures, the aspect ratio of the figure window is set according to the array.`
"""

import matplotlib.pyplot as plt
plt.gray()
for i in range(4):
    plt.matshow(digits.images[i])

digits.data[:5]

df = pd.DataFrame (digits.data)
df.head()

digits.target

df['target'] = digits.target
df.head()

"""`When machine learning algorithms are used to make predictions on data that was not used to train the model, the train-test split procedure is used to estimate their performance.`"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split (df.drop(['target'],axis='columns'),digits.target, test_size = 0.2)

print(len(x_test))
print(len(x_train))

print(len(y_train))
print(len(y_test))

"""`A group of elements viewed as a whole rather than individually is referred to as an ensemble. An Ensemble method generates a number of models and then combines them to solve the problem. Ensemble methods aid in the model's robustness and generalizability. In this article, we'll look at a few methods and how they're implemented in Python.`

#A random forest classifier is a type of classification algorithm. A random forest is a meta estimator that uses averaging to improve predictive accuracy and control over-fitting by fitting a number of decision tree classifiers on various sub-samples of the dataset.
"""

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model

model.fit (x_train, y_train)

model.score(x_test, y_test)*100

"""`On the basis of the trained model, the Python predict() function allows us to predict the labels of data values. Only one argument is accepted by the predict() function, which is usually the data to be tested.`"""

predicted_y = model.predict(x_test)

from sklearn.metrics import confusion_matrix
modelnew = confusion_matrix(y_test, predicted_y)
modelnew

"""`Seaborn is a Python library based on matplotlib that is open-source. It's used for exploratory data analysis and data visualization. With dataframes and the Pandas library, Seaborn is a breeze to use. The graphs that are created can also be easily customized.`

`"figsize" is a tuple of the width and height of the figure in inches, and dpi is the dots-per-inch (pixel per inch). To create an 800x400 pixel, 100 dots-per-inch figure, we can do: In [17]: fig = plt. figure(figsize=(8,4), dpi=100)`

`A heatmap is a two-dimensional graphical representation of data that uses colors to represent the individual values in a matrix. The seaborn python package allows users to create annotated heatmaps that can be tweaked using Matplotlib tools to meet their needs.`
"""

import matplotlib.pyplot as plt
import seaborn as sb
plt.figure (figsize=(5,3))
sb.heatmap(modelnew, annot=True)
plt.xlabel('Predicted')
plt.ylabel('Truth')